x <- READ.CSV("C:\Users\tal\Documents\school\Coursera\Data Science\R\hw1_data.csv")
C:\\Users\\tal\\Documents\\school\\Coursera\\Data Science\\R\\hw1_data.csv
x <- READ.CSV("C:\\Users\\tal\\Documents\\school\\Coursera\\Data Science\\R\\hw1_data.csv")
x <- read.csv("C:\\Users\\tal\\Documents\\school\\Coursera\\Data Science\\R\\hw1_data.csv")
head(x,2)
nrow(x)
tail(x,2)
x[["Ozone",47]]
x[[Ozone,47]]
x[Ozone,47]
x[47,"Ozone"]
nrow(complete.cases(x["Ozone"])
j
nrow(complete.cases(x["Ozone"]))
complete.cases(x$Ozone)
complete.cases(x$Ozone)[TRUE]
nrow(complete.cases(x$Ozone))
complete.cases(x$Ozone)[x==TRUE]
complete.cases(x$Ozone)[u==TRUE]
colSums(is.na(x))
colmeans(x)
colMeans(x)
colMeans(x, na.rm = TRUE)
x[which(x>31), , , which(x>90)]
x[x$Ozone>31, , , x$Temp>90,]
x[x$Ozone>31, x$Temp>90,]
x[x$Ozone>31, , , x$Temp>90, ,]
x
x[x$Ozone>31,]
x[x$Ozone>31,][x$Temp>90,]
colMeans(x[x$Ozone>31,][x$Temp>90,],na.rm = TRUE)
colMeans(x[x$Month==6,],na.rm = TRUE)
max(x[x$Month==5,]$Ozone)
max(is.na(x[x$Month==5,]$Ozone)
)
max(complete.cases(x)[x$Month==5,]$Ozone)
max(complete.cases(x[x$Month==5,])$Ozone)
complete.cases(x)
is.na(x)
max(is.na(x)[x$Month==5,]$Ozone)
max(complete.cases(x[x$Month==5,])$Ozone, na.rm=TRUE)
max(is.na(x[x$Month==5,]$Ozone), na.rm=TRUE)
max(x[x$Month==5,]$Ozone, na.rm=TRUE)
colMeans(x[x$Ozone>31,][x$Temp>90], na.rm=TRUE)
colMeans(x[x$Ozone>31,][x$Temp>90,], na.rm=TRUE)
z <- 1:4
y <- 2:3
w <- z+y
t <- 4L
class(t)
t <- c(4, TRUE)
class(t)
z <- c(4, TRUE)
y  <- c(3, 2, 10)
w <- cbind(z, y)
z <- c(1,3, 5)
w <- cbind(z, y)
w$dim
dim(w)
t <- list(2, "a", "b", TRUE)
t[[1]]
class(t[[1]])
z <- 1:4
y <- 2:3
w <- z+y
t <- c(17, 14, 4, 5, 13, 12, 10)
t[t > 10] <- 4]
t[t > 10] <- 4
head(x,2)
tail(x,2)
x[47,Ozone]
x[47,"Ozone"]
colSums(is.na(x))
colMeans(x, na.rm = TRUE)
colMeans(x[x$Month==6], na.rm = TRUE)
colMeans(x[x$Month==6,], na.rm = TRUE)
max(x[x$Month==5,]$Ozone, na.rm = TRUE)
mean(x[x$Ozone>31,][x$Temp>90,]$Solar.R, na.rm = TRUE)
colMeans(x[x$Ozone>31,][x$Temp>90,], na.rm = TRUE)
x[which(x$Ozone>31 & x$Temp>90),]
colMeans(data[which(data$Ozone>31 & data$Temp>90),], na.rm = TRUE)
colMeans(x[which(x$Ozone>31 & x$Temp>90),], na.rm = TRUE)
x[x$Ozone>31,][x$Temp>90,]
R.version.string
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- ("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "your_name_here")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[ia.na(x)]
x[is.na(x)]
y<- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo, bar")]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly, "Sean")"
patients <- c("Bill", "Gina", "Kelly, "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
?oauth_app
library(httr)
myapp = <- oauth_app("github", key="3ecf927ff4299c54c73a",secret="2c630703885c1b773282cae35e103a2499a45b8c")
myapp <- oauth_app("github", key="3ecf927ff4299c54c73a",secret="2c630703885c1b773282cae35e103a2499a45b8c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?oauth_endpoints
oauth_endpoints("github")
github <- oauth_endpoints("github")
github_token <- oauth2.0_token(github, my app)
github_token <- oauth2.0_token(github, myapp)
library(httpuv)
github <- oauth_endpoints("github")
library(httr)
github <- oauth_endpoints("github")
myapp = <- oauth_app("github", key="3ecf927ff4299c54c73a",secret="2c630703885c1b773282cae35e103a2499a45b8c")
myapp <- oauth_app("github", key="3ecf927ff4299c54c73a",secret="2c630703885c1b773282cae35e103a2499a45b8c")
github_token <- oauth2.0_token(github, my app)
github_token <- oauth2.0_token(github, myapp)
install.packages(c("Rcpp", "httpuv", "shiny"))
github_token <- oauth2.0_token(github, myapp)
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file(fileUrl,temp)
dataset <- read.csv(unz(temp, filename="activity.csv"))
str(dataset)
summary(dataset)
sums <- dataset[, sum(steps), by = date]
with(dataset, aggregate(dataset$steps, dataset$date, sum))
sapply(split(dataset$steps, dataset$date), colSums)
with(dataset, aggregate(dataset$steps, list(dataset$date), sum))
hust(with(dataset, aggregate(dataset$steps, list(dataset$date), sum)))
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum)))
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$steps)
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x)
?hist
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x, br=NROW(na.omit(dataset)))
NROW(na.omit(dataset))
sumsByDate <- with(dataset, aggregate(dataset$steps, list(dataset$date), sum))
hist(sumsByDate$x, br=NROW(na.omit(sumsByDate)))
hist(na.omit(sumsByDate$x), br=NROW(na.omit(sumsByDate)))
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x)
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x, br = 10)
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x, br = 8)
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x, br = 6)
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x)
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x)
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x, xlab = "Steps Per Day", main="Total Number of Steps Per Day", col="Blue")
hist(with(dataset, aggregate(dataset$steps, list(dataset$date), sum))$x, xlab = "Steps Per Day", main="Total Number of Steps Per Day", col="cadetblue")
statsByDate <- with(dataset, aggregate(dataset$steps, list(dataset$date), c(sum, mean, median))
)
meansByDate <- with(dataset, aggregate(dataset$steps, list(dataset$date), mean))
mediansByDate <- with(dataset, aggregate(dataset$steps, list(dataset$date), mean))
str meansByDate
str (meansByDate)
statsByDate <- merge(sumsByDate, meansByDate, by.x = "Group.1", by.y = "Group.1"))
statsByDate <- merge(sumsByDate, meansByDate, by.x = "Group.1", by.y = "Group.1")
View(statsByDate)
View(statsByDate)
statsByDate <- merge(statsByDate, mediansByDate, by.x = "Group.1", by.y = "Group.1")
View(statsByDate)
View(statsByDate)
names(statsByDate) <- c("Date", "Sum", "Mean", "Median")
View(statsByDate)
View(statsByDate)
View(dataset)
View(dataset)
meanByInterval <- with(dataset, aggregate(dataset$steps, list(dataset$interval), mean))
View(meanByInterval)
View(meanByInterval)
?with
?mean
meanByInterval <- with(dataset, aggregate(dataset$steps, list(dataset$interval), mean, na.rm = TRUE))
View(meanByInterval)
View(meanByInterval)
?plot
names(meanByInterval) <- c("interval", "mean")
names(meanByInterval) <- c("Interval", "Mean")
View(meanByInterval)
View(meanByInterval)
plot(meanByInterval$Interval, meanByInterval$Mean, type="l", ylab = "Average Daily Activity", xlab = "Interval", main="Average Daily Activity")
, col="blueviolet"
plot(meanByInterval$Interval, meanByInterval$Mean, type="l", ylab = "Average Daily Activity", xlab = "Interval", main="Average Daily Activity", col="blueviolet")
max(meanByInterval$Mean)
meanByInterval[Mean == max(meanByInterval$Mean)]
meanByInterval[meanByInterval$Mean == max(meanByInterval$Mean)]
meanByInterval[,meanByInterval$Mean == max(meanByInterval$Mean)]
meanByInterval[meanByInterval$Mean == max(meanByInterval$Mean), ]
meanByInterval[meanByInterval$Mean == max(meanByInterval$Mean), ]$Interval
mean(sumsByDate$x)
mean(sumsByDate$x, na.rm=TRUE)
median(sumsByDate$x, na.rm=TRUE)
NROW(na.omit(dataset))
sum(is.na(dataset))
meanByDate <- with(dataset, aggregate(dataset$steps, list(dataset$date), mean, na.rm = TRUE))
View(meanByDate)
View(meanByDate)
View(meanByInterval)
View(meanByInterval)
?ddply
library(plyr)
install.packages("plyr")
library("plyr")
?ddply
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
dataset2 <- ddply(dataset, ~ interval, transform, steps = impute.mean(steps))
View(dataset2)
View(dataset2)
View(dataset)
View(dataset)
dataset <- read.csv(unz(temp, filename="activity.csv"))
View(dataset)
View(dataset)
?replace
?apply
View(meanByInterval)
View(meanByInterval)
replaceNAWithIntervalMean <- function(row){
if (is.na(row$steps))
row$steps <- meanByInterval[meanByInterval$Interval == row$interval, ]$Mean
}
dataset2 <- apply(dataset, 1, replaceNAWithIntervalMean)
replaceNAWithIntervalMean <- function(row){
if (is.na(row$steps))
print(row)
}
replaceNAWithIntervalMean <- function(row){
print(row)
}
apply(dataset[1:10, ], 1, replaceNAWithIntervalMean)
replaceNAWithIntervalMean <- function(row){
print(str(row)
}
replaceNAWithIntervalMean <- function(row){
print(str(row))
}
apply(dataset[1:10, ], 1, replaceNAWithIntervalMean)
apply(dataset[1:3, ], 1, replaceNAWithIntervalMean)
naindex <- which(is.na(dataset)==TRUE)
impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
dataset2 <- ddply(dataset, .(interval), transform, steps = impute.mean(steps),date = date,interval = interval)
dataset2 <- dataset2[order(dataset2$date, dataset2$interval),]
row.names(dataset2) <- 1:nrow(dataset2)
View(dataset2)
View(dataset2)
sumsByDate2 <- with(dataset2, aggregate(dataset2$steps, list(dataset2$date), sum))
hist(sumsByDate2$x, xlab = "Steps Per Day", main="Total Number of Steps Per Day", col="cadetblue")
mean(sumsByDate2$x, na.rm=TRUE)
median(sumsByDate2$x, na.rm=TRUE)
mean(sumsByDate$x, na.rm=TRUE)
median(sumsByDate$x, na.rm=TRUE)
?weekdays
weekdays(as.Date("2014/07/19","%m/%d/%Y"))
weekdays(as.Date("2014/07/18","%m/%d/%Y"))
weekdays(as.Date("2014/07/17","%m/%d/%Y"))
weekdays(as.Date("2014/07/17","%Y/%m/%d"))
weekdays(as.Date("2014/07/19","%Y/%m/%d"))
dataset$date <- as.Date(dataset$date, format = "%m/%d/%Y")
dataset$dayType <- weekdays(dataset$date)
dataset2$date <- as.Date(dataset$date, format = "%m/%d/%Y")
dataset2$dayType <- weekdays(dataset$date)
View(dataset2)
View(dataset2)
dataset <- read.csv(unz(temp, filename="activity.csv"))
View(dataset)
View(dataset)
dataset2 <- dataset2[order(dataset2$date, dataset2$interval),]
row.names(dataset2) <- 1:nrow(dataset2)
View(dataset2)
View(dataset2)
dataset2 <- ddply(dataset, .(interval), transform, steps = impute.mean(steps),date = date,interval = interval)
dataset2 <- dataset2[order(dataset2$date, dataset2$interval),]
row.names(dataset2) <- 1:nrow(dataset2)
View(dataset2)
View(dataset2)
dataset2$date <- as.Date(dataset$date, format = "%Y-%m-%d")
View(dataset2)
View(dataset2)
str(dataset2)
dataset2$dayType <- weekdays(dataset$date)
dataset2$dayType <- weekdays(dataset2$date)
dataset2$date <- as.Date(dataset2$date, format = "%Y-%m-%d")
dataset2$dayType <- weekdays(datase2t$date)
dataset2$dayType <- weekdays(dataset2$date)
View(dataset2)
View(dataset2)
dataset2$dayType <- lapply(dataset2$dayType, function(x) if (x == "Saturday" | x == "Sunday") "weekend" else "weekday")
View(dataset2)
View(dataset2)
meanByIntervalDayType <- with(dataset2, aggregate(dataset$steps, list(dataset$interval), mean, na.rm = TRUE))
View(meanByIntervalDayType)
View(meanByIntervalDayType)
meanByIntervalDayType <- with(dataset2, aggregate(dataset2$steps, list(dataset2$interval, dataset2$dayType), mean, na.rm = TRUE))
)
meanByIntervalDayType <- with(dataset2, aggregate(dataset2$steps, list(dataset2$interval, dataset2$dayType), mean, na.rm = TRUE))
meanByIntervalDayType <- dataset2[, Mean:=mean(steps), by=list(interval, dayType)]
meanByIntervalDayType <- aggregate( steps ~ interval + dayType , dataset2 , mean )
summary(dataset2)
str(dataset2)
View(dataset2)
View(dataset2)
dataset2$dayType <- as.factor(dataset2$dayType)
dataset2$dayType <- weekdays(dataset2$date)
dataset2$dayType <- lapply(dataset2$dayType, function(x) if (x == "Saturday" | x == "Sunday") as.factor("weekend") else as.factor("weekday")
)
str(dataset2)
dataset2$dayType <- weekdays(dataset2$date)
dataset2$dayType <- lapply(dataset2$dayType, function(x) if (x == "Saturday" | x == "Sunday") as.character("weekend") else as.character("weekday"))
str(dataset2)
dataset2$dayType <- weekdays(dataset2$date)
str(dataset2)
dataset2$dayOfWeek <- weekdays(dataset2$date)
dataset2$weekend <- lapply(dataset2$dayOfWeek, function(x) if (x == "Saturday" | x == "Sunday") TRUE else FALSE)
str(dataset2)
dataset2$weekend <- dataset2$dayOfWeek
str(dataset2)
transformDayOfWeek <- function(x) { if (x == "Saturday" | x == "Sunday") TRUE else  FALSE}
transform(dataset2, weekend = transformDayOfWeek(weekend))
str(dataset2)
transformDayOfWeek <- function(x) { !weekdays(x) %in% c('Saturday','Sunday')}
d <- transform(dataset2, weekend = transformDayOfWeek(weekend))
str(dataset2)
d <- transform(dataset2, weekend = transformDayOfWeek(weekend))transformDayOfWeek <- function(x) { !weekdays(x) %in% c("Saturday","Sunday")}
transformDayOfWeek <- function(x) { !weekdays(x) %in% c("Saturday","Sunday")}
d<- transform(dataset2, weekend = transformDayOfWeek(weekend))
dataset2$weekend <- dataset2$date
d<- transform(dataset2, weekend = transformDayOfWeek(weekend))
View(d)
View(d)
d<- subset(d, weekend == FALSE)
View(d)
View(d)
d<- transform(dataset2, weekend = transformDayOfWeek(weekend))
str(d)
transformDayOfWeek <- function(x) { if (weekdays(x) %in% c("Saturday","Sunday")) "weekend" else "weekday"}
dataset2$weekend <- dataset2$date
dataset2 <- transform(dataset2, weekend = transformDayOfWeek(weekend))
dataset2$weekend <- dataset2$date
transformDayOfWeek <- function(x) { !weekdays(x) %in% c("Saturday","Sunday")}
dataset2 <- transform(dataset2, weekend = transformDayOfWeek(weekend))
View(dataset2)
View(dataset2)
dateDF$dayType <- "weekday"
dataset2$dayType <- "weekday"
dataset2$dayType[dataset2$weekend == FALSE] <- "weekend"
View(dataset2)
View(dataset2)
meanByIntervalDayType <- aggregate(steps ~ interval + dayType, dataset2, mean)
View(meanByIntervalDayType)
View(meanByIntervalDayType)
str(meanByIntervalDayType)
meanByIntervalDayType$dayType <- as.factor(meanByIntervalDayType$dayType)
str(meanByIntervalDayType)
xyplot(steps ~ meanByIntervalDayType2$interval | dayType, layout = c(1, 2))
library(lattice)
xyplot(steps ~ meanByIntervalDayType2$interval | dayType, layout = c(1, 2))
xyplot(meanByIntervalDayType2$steps ~ meanByIntervalDayType2$interval | meanByIntervalDayType2$dayType, layout = c(1, 2))
xyplot(meanByIntervalDayType$steps ~ meanByIntervalDayType$interval | meanByIntervalDayType$dayType, layout = c(1, 2))
xyplot(meanByIntervalDayType$steps ~ meanByIntervalDayType$interval | meanByIntervalDayType$dayType, layout = c(1, 2), type ="l")
?xyplot
xyplot(meanByIntervalDayType$steps ~ meanByIntervalDayType$interval | meanByIntervalDayType$dayType, layout = c(1, 2), type ="l", ylab="Number of Steps", xlab="Interval")
library(knitr)
install.packege(knitr)
install.packages(knitr)
install.packages('knitr', dependencies = TRUE)
library(knitr)
?knitr
sessionInfo()
setwd("C:/Users/tal/Documents/GitHub/RepData_PeerAssessment1")
dataset <- read.csv("./activity/activity.csv")
